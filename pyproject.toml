[project]
name = "eeg2025"
version = "0.1.0"
description = "Foundation models and compression for robust EEG analysis in NeurIPS 2025 challenge"
authors = [{ name = "EEG Challenge Team" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
keywords = [
  "eeg",
  "neuroscience",
  "machine-learning",
  "self-supervised-learning",
  "compression",
]

dependencies = [
  "numpy>=1.24.0",
  "torch>=2.1.0",
  "pytorch-lightning>=2.1.0",
  "mne>=1.5.0",
  "hydra-core>=1.3.0",
  "pandas>=2.0.0",
  "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=7.4.0",
  "black>=23.7.0",
  "flake8>=6.0.0",
  "mypy>=1.5.0",
  "pre-commit>=3.4.0",
]
docs = ["sphinx>=7.1.0", "sphinx-rtd-theme>=1.3.0"]
all = ["eeg2025[dev,docs]"]

[project.urls]
Homepage = "https://github.com/your-username/eeg2025"
Repository = "https://github.com/your-username/eeg2025.git"
Documentation = "https://eeg2025.readthedocs.io"
"Bug Tracker" = "https://github.com/your-username/eeg2025/issues"

[project.scripts]
eeg2025-train = "src.training.train_cross_task:main"
eeg2025-pretrain = "src.training.pretrain_ssl:main"
eeg2025-eval = "src.training.evaluate:main"

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["build/", "dist/", "docs/"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\(Protocol\):",
    "@(abc\.)?abstractmethod",
]
