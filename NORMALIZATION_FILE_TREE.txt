📦 eeg2025/
│
├── 🎯 FINAL SUBMISSION (Z-Score Normalization)
│   ├── scripts/training/challenge1/train_challenge1_multi_release.py  ⭐ Line 290
│   │   └── X = (X - X.mean(axis=1, keepdims=True)) / (X.std(axis=1, keepdims=True) + 1e-8)
│   │       ├── Dataset: MultiReleaseEEGDataset
│   │       ├── Model: CompactResponseTimeCNN (75K params)
│   │       ├── Output: weights_challenge_1_multi_release.pt
│   │       └── Score: NRMSE 1.00
│   │
│   └── scripts/training/challenge2/train_challenge2_multi_release.py  ⭐ Line 202
│       └── X = (X - X.mean(axis=1, keepdims=True)) / (X.std(axis=1, keepdims=True) + 1e-8)
│           ├── Dataset: MultiReleaseEEGDataset
│           ├── Model: CompactExternalizingCNN (64K params)
│           ├── Output: weights_challenge_2_multi_release.pt
│           └── Score: NRMSE 1.46
│
├── �� EARLY EXPERIMENTS (Also Z-Score)
│   └── scripts/train_tcn_competition_data.py  Line 262
│       └── X = (X - X.mean(axis=1, keepdims=True)) / (X.std(axis=1, keepdims=True) + 1e-8)
│           ├── Model: TCN (Temporal Convolutional Network)
│           └── Status: ❌ Not used in final submission
│
├── 🛠️ ALTERNATIVE METHOD 1: Robust Scaling
│   └── src/dataio/preprocessing.py  Lines 130-175
│       └── class LeakageFreePreprocessor:
│           ├── fit_normalization_stats()  → median + IQR per channel
│           ├── apply_normalization()      → (X - median) / IQR
│           ├── save_normalization_stats() → pickle file
│           └── load_normalization_stats() → restore from disk
│           │
│           ├── Features:
│           │   ✅ Robust to outliers
│           │   ✅ Prevents data leakage
│           │   ✅ Per-session statistics
│           └── Status: ❌ Implemented but not used in submission
│
└── 🚀 ALTERNATIVE METHOD 2: GPU RMSNorm
    └── src/gpu/triton/rmsnorm.py  Lines 1-120
        └── @triton.jit rmsnorm_kernel()
            ├── Per-channel RMS computation
            ├── GPU parallel processing
            ├── Triton JIT compilation
            │
            ├── Features:
            │   ✅ 10-100x faster on GPU
            │   ✅ Per-channel normalization
            │   ⚠️ No mean centering (only scaling)
            └── Status: ❌ Experimental, not used in submission

═══════════════════════════════════════════════════════════════

📊 SUMMARY:

Total Methods Implemented: 3
├── ✅ Method 1 (Z-Score):      USED in final submission
├── ⚠️ Method 2 (Robust):       Available but unused
└── 🧪 Method 3 (GPU RMSNorm):  Experimental

Final Submission Score: 1.32 NRMSE
├── Challenge 1: 1.00 NRMSE (30% weight)
└── Challenge 2: 1.46 NRMSE (70% weight)

Key Files for Team Meeting:
1. scripts/training/challenge1/train_challenge1_multi_release.py
2. scripts/training/challenge2/train_challenge2_multi_release.py
3. src/dataio/preprocessing.py (bonus: shows leakage prevention)
4. src/gpu/triton/rmsnorm.py (bonus: shows GPU optimization)

═══════════════════════════════════════════════════════════════
